8.1 结构体的定义
	
	8.1.1 结构体定义
		可以使用type关键字定义新的数据类型，由于每一个结构体都属
	于一个新的数据类型，所以在定义结构体时必须使用type关键字，另
	外还有关键字“struct”
	
		格式如下（注意语法与C语言与差异！）：
		type structName struct{
			field1 类型
			field2 类型
			.
			.
			.
		}
		
		注意：
		（1）结构体命名规则和变量名相同
		（2）结构体的命名还遵循可见性规则，即首字母大写的可以在
		包外访问。
		（3）结构体内的所有属性使用{}括起来，左大括号必须和struct
		关键字放在一行，右大括号独占一行，与函数定义一样。
		
		1、基本类型字段
			在定义结构体时，字段的数据类型可以是Go语言支持的任何
		基本数据类型。
		
		2、预留字段
			在定义结构体时，为了对结构体进行扩展预留的，这种字段
		叫作预留字段（Reserved-field）。使用标识符'_'来命名预留字
		段。（与C语言柔型数组一样）
			例如：
			
			type people struct {
				age int
				name string
				_ string
			}
			
			如上式第三个字段是预留字段。
			
		3、结构体作为字段
			字段可以是其他结构体类型。
		
	8.1.2 结构体变量
		
		1、结构体变量的声明
			例如：
			var stu student
			注：student是我们定义的结构体
		
		还有一种简写方式
			stu := student{}
			
			注意简写方式，在结构体student后面必须加“{}”，表示声明的
		同时初始化其存储空间。
		
		2、字段的访问
			跟C语言一样使用'.'来访问字段（成员）
		
		注意：当定义了一个结构体变量，并且系统为它分配了内存空间后
		，结构体的个字段将被初始化为该类型的零值。
		
	8.1.3 结构体对象
		Go语言使用结构体来实现面向对象编程模型的。
		
		例如：
			var stu *student
			stu = new(student)
		new会返回一个指向该结构体对象的地址指针。
		
		还可简写为：
			stu := new(student)
			
		使用该指针访问字段（成员）还是使用'.'操作符（与C语言不同）
	
		在使用new来创建一个结构体对象时，它可以出现在程序的任何
	位置。
	
	8.1.4 结构体对象的初始化
		
		1、初始化全部字段
			structvariableName := structName{field1, field2, ...}
			And
			structObjectName := &structName{field1, field2, ...}
		2、初始化部分字段
			structvariableName := structName{field1:v, field2:v, ...}
			And
			structObjectName := &structName{field1:v, field2:v, ...}
		
			以"字段名:字段值"进行初始化时，可以不按照结构体中
		定义的顺序来
	
	8.1.5 结构体的赋值和关系操作
		在Go语言中，相同类型的结构体可以直接用"="进行赋值
		还支持关系操作符 “==”和“！=”，但不支持'>','<'比较操作
		
8.2 嵌入式结构
	所谓嵌入式结构就是没有定义名字的结构体。
	嵌入式结构可以作为结构体的一个字段，或者可以直接使用嵌入式
结构定义变量。

		