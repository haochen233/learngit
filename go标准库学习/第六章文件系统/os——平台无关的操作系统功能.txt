1、文件系统
	处理文件的第一步是确定要处理的文件的名字。Go 将文件名表示为简单的字
符串，提供了 path、filepath 等库来操作文件名或路径。用 os 中 File 结构
的 Readdir 可以列出一个目录中的内容。
	可以用 os.Stat 或 os.Lstat 来检查文件的一些特性，如权限、大小等。
	os.TempDir 可以返回默认的临时目录，用于存放临时文件。关于临时文件，
在 ioutil 中已经讲解了。
	os 包还包含了很多其他文件系统相关的操作，比如创建目录、重命名、移动
文件等等。
	
	
	1.1 os — 平台无关的操作系统功能实现
		os 包规定为所有操作系统实现的接口都是一致的。有一些某个系统特定
	的功能，需要使用 syscall 获取。
		实际上，os 依赖于 syscall。在实际编程中，我们应该总是优先使用os
	中提供的功能，而不是 syscall。
	下面是一个简单的例子，打开一个文件并从中读取一些数据：
	
	file, err := os.Open("file.go") // Read-Only.
		
	1.2 文件IO
		文件相关的 I/O涉及到系统调用，在讲解时会涉及到 Unix 在这方面的
	系统调用。
		在 Go 中，文件描述符封装在 os.File 结构中，通过 File.Fd() 可以
	获得底层的文件描述符：fd。
		三种常见的标准文件描述符：0-Stdin , 1-Stdout, 2-Stderr.
		
	1.2.1 打开一个文件：OpenFile
		OpenFile既能打开一个已经存在的文件，也能创建并打开一个文件。
		函数签名：
		func OpenFile(name string, flag int, perm FileMode)(*File, error)
		
		要打开的文件由参数 name 指定，它可以是绝对路径或相对路径.
		位掩码参数 flag 用于指定文件的访问模式，可用的值在 os 中定义为常量:
		
		与Linux下类似
		const (
			O_RDONLY int = syscall.O_RDONLY // 只读模式打开文件
			O_WRONLY int = syscall.O_WRONLY // 只写模式打开文件
			O_RDWR   int = syscall.O_RDWR   // 读写模式打开文件
			O_APPEND int = syscall.O_APPEND // 写操作时将数据附加到文件尾部
			O_CREATE int = syscall.O_CREAT  // 如果不存在将创建一个新文件
			O_EXCL   int = syscall.O_EXCL   // 和 O_CREATE 配合使用，文件必须不存在
			O_SYNC   int = syscall.O_SYNC   // 打开文件用于同步 I/O
			O_TRUNC  int = syscall.O_TRUNC  // 如果可能，打开时清空文件
		)
		
		使用管道运算符'|'指定多种flag
		位掩码参数 perm 指定了文件的模式和权限位，类型是 os.FileMode
		类似Linux下的 0777（读写执行）， 0666（读写） 
		
		使用方法：
		打开一个文件，一般通过 Open 或 Create，我们看这两个函数的实现：
		func Open(name string) (*File, error) {
			return OpenFile(name, O_RDONLY, 0)
		}
		
		func Create(name string) (*File, error) {
			return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)
		}
		
		1.2.2 读取文件内容：Read
		func (f *File)Read(name string)(n int, err error)
		从方法声明可以知道，File 实现了 io.Reader 接口。
		
		对比下 ReadAt 方法：
		func (f *File) ReadAt(b []byte, off int64) (n int, err error)
		ReadAt 从指定的位置（相对于文件开始位置）读取长度为 len(b) 个
	字节数据并写入 b。它返回读取的字节数和可能遇到的任何错误
		Read 和 ReadAt 的区别：前者从文件当前偏移量处读，且会改变文件
	当前的偏移量；而后者从 off 指定的位置开始读（即与开头的偏移量），
	且不会改变文件当前偏移量。
		
		1.2.3 数据写入文件：Write
			func (f *File)Write(b []byte)(n int, err error)
		Write 向文件中写入 len(b) 字节数据。
		如果返回值 n!=len(b)，本方法会返回一个非 nil 的错误。
		
		从方法声明可以知道，File 实现了 io.Writer 接口。
		Write 对应的系统调用是 write
		Write 与 WriteAt 的区别同 Read 与 ReadAt 的区别一样。
		
		注意：Write 调用成功并不能保证数据已经写入磁盘，因为内核会缓
	存磁盘的I/O 操作。
	
		1.2.4 关闭文件：Close
			func (f *File) Close() error
		os.File.Close() 是对 close() 的封装。我们应该养成关闭不需
	要的文件的良好编程习惯。文件描述符是资源，Go 的 gc 是针对内存的，
	并不会自动回收资源，如果不关闭文件描述符，长期运行的服务可能会把
	文件描述符耗尽。
	
		所以一般的写法为下例：
		file, err := os.Open(filepath)
		if err != nil{
			//处理错误
			return
		}
		defer file.Close()
		
		即先判断err，在defer close
		
		关于返回值 error
		以下两种情况会导致 Close 返回错误：
		1. 关闭一个未打开的文件；
		2. 两次关闭同一个文件；
		
		一般不会去检查close的err
		
		1.1.5. 改变文件偏移量：Seek
	func (f *File) Seek(offset int64, whence int) (ret int64, err error)
		whence有三个常量 SEEK_SET,SEEK_CUR,SEEK_END。
		不赘述了。
		
	1.3 截断文件
		trucate 和 ftruncate 系统调用将文件大小设置为 size 参数指定的
	值；Go 语言中相应的包装函数是 os.Truncate 和 os.File.Truncate。
	
		func Truncate(name string, size int64) error
		func (f *File) Truncate(size int64) error
		
		如果文件大长度大于size会把多余的部分丢掉，若小于设置的size，则
	会在文件尾部添加一系列空字节或是一个文件空洞。
	
		它们之间的区别在于如何指定操作文件：
		1）Truncate函数以路径名称字符串来指定文件，并要求可访问该文件（即
		对组成路径名的各目录拥有可执行 (x) 权限。
		2）Truncate方法需要先以可写方式打开操作文件，该方法不会修改文件偏
	移量。
	
	1.4 文件属性
		文件属性，也即文件元数据。在 Go 中，文件属性具体信息通过 
	os.FileInfo 接口获取。
		函数Stat、Lstat和File.Stat可以得到该接口的实例。
		FileInfo 接口如下：

type FileInfo interface {
    Name() string       // 文件的名字（不含扩展名）
    Size() int64        // 普通文件返回值表示其大小；其他文件的返回值含义各系统不同
    Mode() FileMode     // 文件的模式位
    ModTime() time.Time // 文件的修改时间
    IsDir() bool        // 等价于 Mode().IsDir()
    Sys() interface{}   // 底层数据来源（可以返回 nil）
}
	
		1.4.1 改变文件时间戳
			可以显式改变文件的访问时间和修改时间。
	func Chtimes(name string, atime time.Time, mtime time.Time) error
		
	1.5 文件权限
		略。

	1.6 目录与链接
	
		1.6.1 创建和移除（硬）链接
			func Link(oldname, newname string) error
			Link 创建一个名为 newname 指向 oldname 的硬链接。
		
			func Remove(name string) error
			Remove 删除 name 指定的文件或目录。如果出错，会返
		回 *PathError 类型的错误。
			如果目录不为空（有文件），Remove 会返回失败。
	
		1.6.2 更改文件名
			os.Rename是Go语言中封装的函数,与mv命令差不多。
			
			func Rename(oldpath, newpath string) error
			Rename 修改一个文件的名字或移动一个文件。如果 newpath 
		已经存在，则替换它。
		
		1.6.4 创建和移除目录
			mkdir 系统调用创建一个新目录，Go 中的 os.Mkdir 是对应的封装函数。
			func Mkdir(name string, perm FileMode) error
			name 参数指定了新目录的路径名，可以是相对路径，也可以是绝对路径。
			
			因为 Mkdir 所创建的只是路径名中的最后一部分，如果父目录不存
		在，创建会失败。os.MkdirAll 用于递归创建所有不存在的目录。
			类似于Linux下的mkdir和mkdir的-p选项。
			
			移除目录就是前面讲的os.Remove 函数，不过必须是空目录。
			
			为了方便使用，Go 中封装了一个 os.RemoveAll 函数：
			func RemoveAll(path string)	error
			类似rm -r 递归删除。如果 path 指定的对象不存在，RemoveAll 会返回 
		nil 而不返回错误。
		
		1.6.5 读目录
			func (f *File) Readdirnames(n int) (names []string, err error)
			Readdirnames 读取目录 f 的内容，返回一个最多有 n 个成员的[]string，
			
		
			
			