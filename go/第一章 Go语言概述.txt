1.1.2 Go语言的特点
	
	Go语言恰恰是在“快速编译、高效执行、易于开发”这三个条件之间做到了最佳平衡
的一种平衡设计语言。

	1、快速编译
		GO语言编译速度快主要有以下几个原因：
			首先，Go语言不使用头文件。
			其次，Go在编译时会自动进行检查，判断程序和包之间是否有必要的联系，
		如果没有联系，Go会报告编译异常，会强迫程序不导入多余的包，这样也可以
		减轻程序体积，加快编译的速度。
			最后，Go的对象模块里面包含足够多的依赖关系信息，所以编译器不需要重
		新创建文件。开发人员只需要简单地编译主模块，项目中需要的其他部分就会自
		动编译。
		
	2、并发设计易于实现
		相对于其他语言，Go程序的并行、并发设计更加容易，Go使用goroutine这种轻量
	级线程来实现并发，然后通过channel来实现各个goroutine之间的通信。在任意函数前
	面加上“go”关键字，该函数就会在其goroutine线程中自动运行。goroutine通过channel
	通信时屏蔽了几乎所有消息队列，使得程序并发执行效率很高。
	
	3、高效的垃圾回收机制
		使用c++时，内存泄露是长期困扰设计者们的一个难题，Go语言改变了这种现状
	尽管还是像其他静态语言一样执行本地代码，但实质上，代码可以被看做是在某种意
	义的虚拟机上执行的。Go以此来实现高效快速的垃圾回收（使用了一个简单的标记-
	清除算法）。
	
	
		另外，Go还有其他一些优点，比如：Go语言是一门类型安全和内存安全的编程
	语言。虽然Go中仍有指针的存在，但并不允许进行运算。
	
	
	1.5.1 Go程序结构
		Go程序是以包（package）的形式来组织的，这和Python语言类似。Go程序一般
	由三部分组成：包声明部分、第三方包导入部分和函数声明部分。
		Go语言使用关键字“package”声明要创建的包；使用关键字“import”导入第三方
	包；使用关键字“func”声明要创建的函数。
	
	1、本地包声明
		包是Go程序的基本单位，所以每个Go程序源代码的开始都是一个包声明
		package<packagename>
		除了main包外，其他包里都不能有main函数。注意，一个可执行程序有且仅有
	一个main包，一个main包只有一个main函数。
	
	2、第三方包导入
		使用import关键字导入，在Go语言中，包的导入有三种模式：正常模式、别名模式
	和简便模式。
	（1）正常模式
		import<packagename>
		import包声明关键字，packagename告诉编译器要导入哪个包
	（2）别名模式
		import别名<packagename>
	（3）简便模式
		在简便模式中，可以直接使用funcname进行第三方包的调用，不需要pkgname
		导入格式：
			import .<packagename>
	3、函数声明
		Go程序的真正执行体也是函数体，一个Go程序应至少声明一个main函数。函数
	声明以关键字func开头，格式如下：
		func funcname(参数列表)(返回值列表){
		//函数体
		}
	
	1.5.3 Go源程序语法要点
		1、Go语句中的分号
			和C语言一样，Go语言的正式语法也使用分号来终止语句。但是这些分号
		由词法分析器在扫描源代码过程中使用简单的规则自动插入，因此输入源代码
		多数时候就不需要分号了，Go程序中，出现分号的典型位置是在for循环的分隔
		语句或类似之处。
		
		2、左大括号的约定
			Go语言规定，函数、控制结构（if,for,switch或select）等的左大括号
		必须和函数声明或者控制结构放在同一行。如果将左大括号放在下一行，编译器
		会在左大括号的前方自动插入一个分号，这可能导致异常的结果。
		
		3、Go语言对UTF-8的支持
			Go语言是天生支持UTF-8的，任何字符都可以直接输出
			
		4、可见性规则
			Go语言中，使用大小写来决定常量、变量、类型、接口、结构或函数是否可以
		被外部包所调用，根据约定：
			（1）函数名首字母小写，即为private。
			（2）函数名首字母大写，即为public。
		
		1.5.4Go的注释方式
		
		1、单行注释
			//（跟c语言一样）
		2、块注释
			/**/（跟C语言一样）
		