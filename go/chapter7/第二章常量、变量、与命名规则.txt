
2.1常量、变量与命名规则

	2.1.1 常量
		1. 常量声明
			Go语言使用关键字 “const”声明常量，需要指定常量名称和常量数据类型。
		格式如下：
			const<constname>[consttype] = <赋值表达式>
			例:
				声明常量PI
				const PI float32 = 3.1415926
				在进行常量声明时也可以隐式类型定义，即可以省略常量类型，编译器
			会根据赋值表达式产生的值，自动推断常量的类型，比如上例还可以声明为：
				const PI = 3.1415926
		2、常量声明过程中的注意事项
			常量的值在编译时就已经确定，在运行时不能改变常量的值。等号右边必须
		是常量或常量表达式，因为只有常量表达式的值在编译时才是确定的，如果是运
		行时赋值，编译会报错的，常量表达式中的函数必须是Go语言的内置函数，不能
		是用户自定义函数，或是从其他包中导入的函数，因为只有内置函数在编译之前
		才是确定的。
	
	2.1.2 变量
		1、 变量的内存模型
			变量名是用来引用变量所存储数据的标识符（Identifier），它实际代表变量
		在内存中的地址，可以使用取地址符“&”获取
			当程序编译时，编译器会自动给每一个变量名分配对应数据类型的内存地址。从
		变量中取值，就是通过变量名找到相应的内存地址，在从该存储单元中读取数据。
		2、变量声明
			Go语言使用关键字“var”来声明变量，需要指定变量名称和变量数据类型
		格式如下：
			var count int
			还可以在声明变量的同时使用“=”给变量赋初值，比如上例
			var count int = 10
			//给int型 变量count赋初值10
			上例中的变量类型type也可以省略，有编译器根据表达式产生的值，自动
		推断变量的类型
		
			Go语言在声明变量时还允许省略掉关键字“var”，而用“:”取代，比如上例
		可以进一步简写为;
			count := 10
		
	
	2.1.3 标识符与命名规则
		1、 Go语言命名规则
			（1）由数字、字母、下划线构成
			（2）首字母不能是数字
			（3）严格区分大小写
			（4）不能与Go语言关键字重复
		
		2、 Go语言内置关键字
			Go语言有25个内置关键字，全部使用小写：
				break、default、func、interface、select、select、case、defer
			、go、map、struct、chan、else、goto、package、、switch、const、
			fallthrouth、if、range、type、continue、for、import、return、var.
			
2.2 基本数据类型
	Go语言基本数据类型包括布尔型、整型、浮点型、复数型、字符型、指针类型，
	其中复数类型是Go语言新增的数据类型。
	
	2.2.1 布尔型数据
		Go语言的布尔型数据（Boolean）和其他编程语言一样，使用关键字“bool”定
	义。布尔型数据在内存中占一个字节，取值只能是“true”和“false”，这和其他编程
	语言有所不同。比如有些编程语言可以用“零”来代替“false”，用“非零”代替“true”
	，Go语言不支持这么做。
	
	例2-1 bool型变量的定义与使用
	package main
	
	import(
		"fmt"
	)
	
	func main(){
		var b1,b2 bool
		b1 = true
		b2 = false
		fmt.Println(b1)
		fmt.Println(b2)
	}
	
	使用bool类型数据时，需要注意以下两点
	（1）布尔类型不接受其他数据类型赋值，如上例中b1 = 1;b2 = 0,编译时会出现
	错误提示。
	（2）布尔类型不能进行强制类型转换，不如b1 = bool(1),编译时会提示错误。
	
	2.2.2 整型数据
		1、整型数据表示方法
			（1）十进制
			（2）八进制
			（3）十六进制
			（4）指数形式
		2、整数数据的类型
			在Go语言中int型是有符号基本型整型，uint型是无符号基本型整数。
			Go语言会根据操作系统平台决定基本型整数是多少位的，32位系统就
		是32位的，64位系统就是64位的。
			Go语言的精确控制性整型数共有8种：int8/uint8、int16/uint16、
		int32/uint32、int64/uint64。
		
		例2-2 整型变量的定义与使用
			package main
			import (
				. "fmt"
			)

			func main() {
				var sum int
				var a int = 100
				b := 28
				sum = a + b
				Println(sum)
			}
		
		3、整型数据的溢出
			与c语言相同，超出了后从头循环，比如65535+1后超出范围，则会成为0
			32767+1会成为-32768
		4、整形数据溢出检查
			在Go语言的math包中，有一些以“Min”或“Max”开头，后面跟上类型名的
		常量，这种常量记录了这种数据类型的最小值和最大值。
			
	
	2.2.3 浮点型数据
		1、浮点型数据的表示方法
			（1）十进制小数形式：由数字和小数点组成，如1.57、0.12
			（2）指数形式：由数字和字母“e”组成，如1.23e3。需要注意“e”之前必须
			有数字，且“e”后面的指数必须为整数。
		2、浮点型数据的类型
			float32 	4字节	精确到小数点后7位
			float64		8字节	精确到小数点后15位
		
		
	2.2.5 字节型数据
		
		1、字节型数据的存储形式
			ASCII码（8位）
		2、字节型数据的输出
			一个字节型数据既可以以整数形式输出，也可以字符形式输出，如：A的ASCII
		值是65。
		
		//字节型数据的定义和使用
		var c1 byte = '65'	//定义字节型变量c1并且初始化为A
	
	2.2.6 rune类型
		
		1、Unicode编码
			Unicode（字符编码方案），使得在一个系统中可以同时处理和显示打不同国家
		的文字。
			Unicode只是将字符与数字建立了映射关系
			常用的UTF（Unicode字符集转换格式）格式有有以下几种：
			UTF-8：  使用1~4B不等长方案，西文通常只用一个字节，东亚文字则需三个字节。
			UTF-16： 用2B无符号整数存储Unicode字符，适合处理中文。
			UTF-32： 用4B无符号整数存储Unicode字符，多数时候优点浪费内存。
		2、Unicode字符的定义和输出
			GO语言使用rune定义Unicode字符，Unicode字符直接输出，就是整数形式；
		要以字符型输出，需要先将存储单元中的Unicode码转换成相应的字符。
		
		例2-10 
			//Unicode字符的定义和使用
			var r1,r2 rune //定义Unicode型变量r1，r2
		
	2.2.7 uintptr
		与c语言相同，在32位系统中指针占四字节，64为系统中占8字节。
			
		3、指针变量的定义与引用
		指针变量的定义形式：
			var <指针变量名>* <基类型>	//与c语言类似
		
		4、使用指针变量的注意事项
			在Go语言中使用指针还应注意以下事项：
			（1）指针变量初始化后的默认值是nil，Go语言中没有NULL常量
			（2）Go语言不支持指针运算，比如c语言中ptr++、ptr--（数组那儿）
			（3）Go语言不支持“->”（指向运算符），而是直接用“.”运算符操作成员
		
	2.3.1 赋值运算符
			略
	
	2.3.2 算术运算符
		+	操作数可以是整数、浮点数和字符串
		-	操作数可以是整数、浮点数
		*	操作数可以是整数、浮点数
		/	分母不能为0
		%	操作数是整数，结果为整数
			
		使用算术运算符要注意以下两点：
		（1）乘除法优先级高于加减法，即先乘除，后加减。
		（2）在Go语言中++，--是语句而非表达式
	
	2.3.3 关系运算符
		==、>=、<=、!=、<、>;
		返回值是bool型，即true与false
	
	2.3.4 逻辑运算符
		!、&&、||;
		操作数是布尔类型，运算结果也是bool类型
	2.3.5 位运算符
		&（按位与） |（按位或） ^（按位异或） ~（按位取反）
		<<（左移） >>（右移）  &^（标志位清除运算符）
		计算与c语言一样
	2.3.6 通道运算符
		通道（Channel），是Go语言提供的消息通信机制，类似于单双向数据管道
	（Pipe），用户可以使用通道在两个或多个Goroutine之间传递消息。
		通道使用运算符“<-”接收或者发送数据
	通道接收数据的格式如下：
		ch<-value
	通道发送数据的格式如下：
		value = <-ch
	2.3.7 运算符的优先级和结合性
		与C语言类似，略
	
	2.4字符串
		在Go语言中，字符串也是一种基本数据类型
	2.4.1 字符串定义
		和Go语言相比，c/c++并不存在原生的字符串类型，通常是以字符数组来表示
	字符串的。
		Go语言中字符串的定义与初始化非常简单，例如：
		var str string 
		str = "Hello World"
		同样：
		var str string = "Hello World"
		
		字符串的内容可以通过数组下标访问，但与数组不同的是，字符串的内容在
	初始化后不能修改
		Go语言还提供了一个非常有用的函数len(),该函数可以计算字符串的长度
	2.4.3 字符串遍历
		Go语言支持两种字符串遍历方式字节数组遍历方式与Unicode字符方式遍历
		字节数组遍历方式，每个字符类型为byte，Unicode字符方式遍历，类型为rune
	
	
	2.5	 常量的初始化规则
	2.5.1 常量的类型
		1、Go内置常量
		比如：true、false、itoa。
		2、自定义常量
		（1）整型常量：int型，可以用十进制、八进制、十六进制
		（2）浮点型常量：比如PI。可用小数或指数形式
		（3）复数常量：略
		（4）字节型常量：byte类型，ASCII码
		（5）字符串常量：初始化字符串
	2.5.2 常量定义方法
		1、单个定义：
			const a int = 100
			还可以省略类型的定义
			const a = 100
		2、多个一起定义
			const a,b,c = 1,"Go",'c'
			//编译器会自动识别a是int，b是string，c是byte
		3、定义常量组
			常量组是用一对括号“()”将常量组中的常量组织起来，例
			const(
			a = 100
			b = 3.14
			c = false
			)
	2.5.3 常量的初始化规则
		1、常量必须是确定存在的
			在对常量初始化时，初始化值必须是确定存在的。不能使用变量
		对常量进行初始化。
		2、使用已存在的常量对常量初始化
		3、常量组初始化规则
			在定义常量组时，如果不提供初始值，则将表示将使用上行的表达式
			例如：
				const (
				a = 100
				b
				c
			)
			那么b和c会默认是100
		4、多个定义常量组初始化规则
			const (
			a,b = 1,2
			c
		)
			这种情况c不知道使用a、b谁的值对c进行初始化。编译程序会报错。
		所以，要对多个定义的常量组正确使用初始化规则，则常量组中每一行
		常量的个数应该一致
			例如：
			const (
				a,b = 1,2
				c,d
			)
			c用a初始化，d用b初始化
	
	2.6.1 枚举类型的定义
		Go语言中的枚举类型必须在常量组中定义
		它在常量组中使用计数器iota，iota从0开始，常量组中每定义一个
	常量iota自动递增1，，通过常量组初始化规则与iota可以达到枚举效果
	。
	例如;
		const{
			Sunday 		= iota //0
			Monday		= iota	//1
			Tuesday		= iota //2
			Wednesday	= iota //3
			Thursday	= iota //4
			Friday		= iota //5
			saturday 	= iota //6
		}
		
		另外如果按行递增，可以省略后续的iota关键字。所以上例还可以定义
	如下:
		const{
			Sunday 		= iota //0
			Monday		= 	//1
			Tuesday		=  //2
			Wednesday	=  //3
			Thursday	=  //4
			Friday		=  //5
			saturday 	=  //6
		}
			
	2.6.2 iota使用规则
		常量组中每定义一个常量iota自动递增1，而每遇到一个const关键字
	，iota就会重置为0
	
	2.6.3 iota的应用举例
	
	
	2.7 变量的定义与声明
	
	2.7.1 变量的类型
		1、值类型
			即基本数据类型，包括 bool、int、float、byte、rune、string
			、complex、error（错误类型）
		2、复合类型
			复合类型即比较复杂的类型，包括数组和结构体
		3、引用类型
			包括指针、切片、字典、通道、接口、函数。
			类似于C语言中的引用和指针能够修改本身的值，而值传递是拷贝了一份。
			
	2.7.2 变量的类型零值
		类型	零值
		bool 	false
		int 	0
		flaot	0
		byte	0
		rune 	0
		string	""
		uintptr nil
		function nil
		slice	nil
		channel	nil
		map		nil
	2.7.3 变量的作用域
		1、全局变量
		2、局部变量
		与C语言相同
	2.7.4 变量的声明与赋值
		1、最标准的声明与赋值
			var i int
			i = 100
		2、声明的同时赋值
			var i int = 100
		3、采用类型推断进行定义
			var i = 100
			//编译器会自动推断变量类型
		4、最简方式
			i := 100
			//省略var关键字，但等号前要加上冒号“:”当一个函数有多个返回值时
		使用
		5、多个全局变量同时声明
			当需要用到多个类型一致的全局变量时，首先需使用var关键字定义一个
		变量组，然后再进行单个变量的声明，例如：
			//变量组
			var(
				a,b,c int
			)
		6、多个局部变量同时声明
			当需要定义多个同一类型的局部变量时，可以采用一条语句并行的方式
		进行声明，例：
			var a,b,c int = 100,200,300
		
		局部变量不能使用var()来进行简写。而全局变量可以。
		7、赋值忽略
			比如定义了四个int变量a,b,c,d。现在需要对a,c,d进行初始化赋值，b
		不用。这种情况下可以用空白符“_”来解决
			例：
				func main(){
					var a,b,c,d int 
					a,_,c,d = 1,2,3,4
				}
			
			//把对b的赋值进行了忽略
	2.8 类型别名
			相当于C语言中的typedef
	
	2.8.1 类型别名定义方式
		在Go语言中使用type关键字为类型定义别名，类型别名必须定义在一个类型
	组中。例：
			type (
				word uint16 //定义word是uint16的别名
			)

			func main() {
				var i word = 1024
				Println(i)
			}
			//可以使用word作为uint16来作为类型
	2.8.2 中文类型名
		由于Go支持UTF-8编码格式，所以在定义类型别名时还可以使用非英文字符。
		例：
			type{
				小数 float32 
				整数 uint32 
				文本 string
			}
	
	2.9 类型转换
			Go语言是安全的，即它不允许数据类型隐式转换，否则会造成精度丢失
		，所有类型转换必须显示进行。这样的机制，保证了Go是类型安全的语言
	2.9.1 类型转换方法
			格式如下：	<变量A> [:]= <变量A的类型>(<变量B>)
			注：“:”是A是未定义时使用，若A已定义过了，即不需要“:”。
	
			
	2.9.2 类型兼容性
			所谓类型兼容性就是指，如果两种数据类型之间可以显式转换，
		就说这两种类型是相互兼容的；反之这两种类型是不兼容的。
		
		int可以转为float
		float可以转为int
		string可以转为字节数组（[]byte），还可以转为整型数组（[]int）
		字节数组（[]byte）可以转为string。
		整型数组（[]int）可以转为string。
	
	2.9.3 类型转换分类
		string到 byte/int的Slice转换
		rune是int的别名。所以string也可以看作是byte/int的切片（Slice）
	即[]byte或[]int。
		
			
			
			
			
			
			
			
			
		
		
		
		
			
			
	
	
	
	
	