4.1.1 if语句的形式
	1、单分支选择结构
		if 表达式{
			语句1
		}
	
	表达式的值为bool类型，是true则执行语句1，是false则不执行。
	
	2、双分支选择结构
		if 表达式{
			语句1
		}else{
			语句2
		}
	表达式的值为bool类型，是true则执行语句1，是false则执行语句2。
	
	3、多分支选择结构
		if 表达式1{
			语句1
		}else if 表达式2{
			语句2
		}else if 表达式3{
			语句3
		.
		.
		.
		}else if 表达式n{
			语句n
		}else{
			语句n+1
		}

4.1.2 if语句的嵌套
		注意else总是与它上面最近的未配对的if匹配。
		（1）左括号必须与if语句放在同一行
		（2）条件表达式不用括号括起来，与if用空格分开
		（3）Go语言还支持初始化条件表达式，如if a := 1;a > 0。
		先给条件变量a赋值，然后在比较。a的作用域仅限于此。
		如果外部也定义了一个同名的a变量，那外部的就会被内部的隐藏
		起来。

4.2.1 switch语句结构
		形式如下：
			switch 条件表达式 {
			case 常量表达式1：
				语句1
			case 常量表达式1：
				语句1
				.
				.
				.
			case 常量表达式n：
				语句n
			default:
				语句 n + 1
			}
		
		switch语句的控制类型由switch条件表达式决定，控制类型可以是任意Go
	语言所支持的数据类型。
		每一个switch分支常量表达式的值得类型，必须和控制类型保持一致，如果
	不一致，必须显示地转换成同一种类型。
		其他与c一样，若没有与任意case常量表达式值一样的，而且没有default
	，则switch语句执行结束。

4.2.2 switch语句的特殊形式	
		(1)、还可以进行多选项case语句，例如：
			case 'x', '*':
			语句
		
		(2)、fallthrough 语句
			通常情况下，switch语句 检测到第一个符合条件的case语句，就去执行
		该case下的语句，执行完后自动退出switch语句，有时希望执行完一个case
		语句后，不退出switch继续执行下一个case，可以显式的调用fallthrough语句
		来完成。
			调用形式为
			switch cond {
			case 1：
				语句1
			case 2：
				语句2
				fallthrough
			case 3：
				语句3
			case 4：
				语句4
			}
		解析：假设case2符合条件，执行语句2，因为case2调用了fallthrough
		，所以继续执行case的语句，然后退出。
		(3)、无条件表达式switch语句
			如果switch关键字后面没有条件表达式，则必须在case语句中进行条件判断
			，这种形式的switch语句，其作用类似于if else if语句
			switch {
			case 条件1：
				语句1
			case 条件2：
				语句2
			.
			.
			.
			case 条件n：
				语句n
			default：
				语句n+1
			}