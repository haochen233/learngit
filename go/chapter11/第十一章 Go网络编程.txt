11.1 Go网络编程简介
	Go语言标准库里提供了net包，它支持基于网络层(IP层)、传输层(TCP/UDP)
以及应用层(如HTTP、FTP、SMTP)的网络通信。

	11.1.1 计算机网络概念和体系结构
		在计算机网络技术发展的历程中，ISO/OSI参考模型和TCP/IP体系结构是
	网络分层设计的两个典型代表。
	
			1、ISO/OSI参考模型
				为了实现不同网络体系之间的相互兼容，国际标准化组织IS于
			1981年制定了开放系统互连参考模型（OpenSystemInterconnectio
			n/Reference Mode, OSI/RM）作为网络体系结构的国际标准。
				OSI参考模型共有7层，从上到下依次为物理层、数据链路层、
			网络层、传输层、会话层、表示层、应用层。
				各层的主要功能为：
				（1）产生原始比特信号，并为数据链路层提供传输比特流的
				一个物理连接。
				（2）数据链路层将比特流封装成一个完整的通信单位“帧”，
				在相邻节点之间进行可靠通信，并提供差错校验、流量控制。
				（3）网络层：实现网络互连，并在不同网络之间提供路由功
				能。
				（4）传输层负责端到端的通信，主要提供面向连接的通信服
				务和无连接的通信服务。
				（5）在传输层的服务上，加强了会话管理、同步和活动管理
				等功能。
				（6）表示层主要功能为语法转换、语法转换和连接管理。不
				类型的计算机之间交换的数据，一般需要经过格式转换才能保
				证其意义不变。
				（7）应用层是OSI参考模型的最高层，直接面向用户。它为用
				户访问OSI提供必要的手段和服务，比如DNS、FTP、Telent、
				DHCP、SMTP服务等。
				
			2、TCP/IP体系结构
				共有四层：网络接口层、网际层、传输层、应用层。
				TCP/IP体系结构在计算机网络领域占有特别重要的地位，成为
			计算机网络事实上的工业标准。
			
			3、TCP/IP协议簇
				主要包括IP、TCP和UDP。
				（1）IP(Internet Protocol)是Internet网络层核心协议，它
			提供不可靠、无连接的分组网络传递服务。IP定义了Internet上相
			互通信的计算机的IP地址，并通过路由选择，将数据报由一台计算
			机传递到另一台计算机。
				（2）TCP(Transmission Control Protocol，传输控制协议)
			是传输层一种面向连接的通信协议，提供可靠的数据传送。
				（3）UDP(User Datagram Protocol，用户数据报协议)是一种
			面向无连接的协议，它不提供可靠的数据传输。
				
	11.1.2 网络编程基本概念
		略、
	
	11.1.3 网络编程模式
		网络编程模式主要有客户-服务器(C-S模式)和浏览器-服务器模式(B-S)
	两种。
		1、C-S模式
			C-S模式即客户端-服务器模式。C-S模式主要由客户应用程序(Clie
		nt)、服务器管理程序(Server)和中间件三个部件组成。
		
		2、B-S模式
			即浏览器-服务器模式，又称B-S架构，B-S以Web技术为主。
	11.1.4 socket网络编程接口
		。。。
		2、socket类型
		（1）流式套接字（SOCK_STREAM）：可靠
		（2）数据报套接字（SOCK_DGRAM）：不可靠 快
		（3）原始套接字（SOCK_RAW）: 在IP的基础上，允许进程直接对较低
		层协议如ICMP、IGMP进行访问，如Ping程序就是使用原始套接字设计的
		
11.2 Go网络编程基础
	Go语言关于网络编程的所有数据结构、函数、方法都定义在net包里。
	
	11.2.1 IP地址和域名解析
		主机地址是网络通信最重要的数据之一，net包中定义了，三种类型的
	主机地址数据类型：IP、IPMask和IPAddr，它们分别用来存储协议相关的网
	络地址。
		1、IP地址类型
			格式如下：
			type IP []byte
			在net包中有几个函数将IP地址作为函数的返回类型，比如ParseIP
		()函数。
			原型如下:
			func ParseIP(s string) IP
			该函数作用是分析IP地址的合法性，如果是一个合法的IP地址，Pa
		rseIP将返回一个IP地址对象。如果是一个非法IP地址，将返回nil。
			还可以使用IP对象的String()方法将地址转换成字符串格式
			原型如下：
			func (ip IP)String() string

		2、IPMask地址类型
			略、
			
		3、域名解析
			在net包中，许多函数或方法调用后返回的是一个指向IPAddr结构
		体的指针，结构体内之定义了一个IP类型的字段。
			定义如下：
			type IPAddr struct{
				IP IP
			}
			IPAddr结构体的主要作用是用于域名解析服务(DNS)，例如，函数
		ResolveIPAddr()可以通过主机名解析主机网络地址。
			原型如下：
			func ResolveIPAddr(net, addr string) (*IPAddr, error)
			
			参数net表示网络类型，可以是"ip"、"ip4"、"ip6"，参数addr
		可以是IP地址或域名，如果是IPv6地址则必须用"[]"括起来
		
			失败了会返回错误（非nil），成功返回nil
			