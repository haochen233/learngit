1.1. 解析路径名字符串	
	path/filepath 包涉及到路径操作时，路径分隔符使用 os.PathSeparator
不管是什么系统平台，在Go语言里是统一的。
	
	Dir() 和 Base() 函数将一个路径名字符串分解成目录和文件名两部分。
	Base 函数返回路径的最后一个元素。在提取元素前会去掉末尾的斜杠。
如果路径是 ""，会返回 "."；如果路径是只有一个斜杆构成的，会返回 "/"。
	
	Dir 返回路径中除去最后一个路径元素的部分，即该路径最后一个元素
所在的目录。

	例如：
	s := filepath.Dir("d:/1/2/3")
	Println(s)

	s2 := filepath.Base("/1/2/1.txt")
	Println(s2)
	
	输出：
	d:\1\2
	1.txt
	
	此外，Ext函数 可以获得路径中文件名的扩展名。
	func Ext(path string) string
	Ext 函数返回 path 文件扩展名。扩展名是路径中最后一个
从 '.' 开始的部分。包括 '.' 。
	如果没有'.'会返回空字符串。
	
	1.2. 相对路径和绝对路径
	
		绝对路径，在 Unix 中，以 / 开始；
		在 Windows 下以某个盘符开始，比如 C:\Program Files。
		
		函数ISAbs判断路径是否是绝对路径
		func IsAbs(path string) bool
		
		而函数Abs(path string) (string, error)
		Abs 返回path路径的绝对路径
		
	1.3 路径的切分和拼接
		对于一个常规文件路径，我们可以通过 Split 函数得到它的
	目录路径和文件名：
		func Split(path string)(dir, file string)
		例如path为"/home/polaris/studygolang"
		dir返回/home/polaris/
		file返回studygolang
		
		即与对比Dir函数返回的目录后多一个路径分隔符'/'
	
	略。。。
	
	1.7 遍历目录
		在 filepath 中，提供了 Walk 函数，用于遍历目录树。
		func Walk(root string, walkFn WalkFunc) error
		Walk 函数会遍历 root 指定的目录下的文件树，对每一
	个该文件树中的目录和文件都会调用 walkFn，包括 root
	自身文件是按照字典序遍历的。
			
		walkFn 的类型 WalkFunc 的定义如下：
type WalkFunc func(path string, info os.FileInfo, err error)error
	
	1.8 Windows 起作用的函数
		filepath包中有三个函数：VolumeName、FromSlash和ToSlash，
	针对非Unix平台的。
	
	1.9 关于path包
		path包提供了对 / 分隔的路径的实用操作函数。
		在 Unix 中，路径的分隔符是 /，但 Windows 是 \。在使用 pa
	th 包时，应该总是使用 /，不论什么系统。
		path 包中提供的函数，filepath 都有提供，功能类似，但实现
	不同。
		一般应该总是使用filepath包，而不是path包。
		
		
	
		