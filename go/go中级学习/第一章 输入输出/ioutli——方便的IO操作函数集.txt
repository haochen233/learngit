	io/ioutil包:
	虽然 io 包提供了不少类型、方法和函数，但有时候使用起来不是那么方便。比如
读取一个文件中的所有内容。为此，标准库中提供了一些常用、方便的IO操作函数。

	1.1 NopCloser函数
		有时候我们需要传递一个 io.ReadCloser 的实例，而我们现在有一个 io.
	Reader 的实例。
		这个时候 NopCloser 就派上用场了。它包装一个io.Reader，返回一个 io.
	ReadCloser ，而相应的 Close 方法啥也不做，只是返回 nil。
	
	1.2 ReadAll 函数
		 func ReadAll(r io.Reader) ([]byte, error)
		它是通过 bytes.Buffer 中的 ReadFrom 来实现读取所有数据的.
		即创建一个Reader对象，用该对象调用ReadFrom读，然后再将使用该对象的
	Bytes方法，生成byte slice返回。
	
	1.3 ReadDir函数
		笔试题：编写程序输出某目录下的所有文件（包括子目录）
		是否见过这样的笔试题？
		
		其实在 ioutil 中提供了一个方便的函数：ReadDir，它读取目录并返回
	排好序的文件和子目录名（ []os.FileInfo ）。
	
		通过这个方法，我们可以很容易的实现“面试题”。
		
		虽然Windows系统下路径分隔符是反斜杠'\'，Go支持的目录中的路径分隔符
	必须是斜杠‘/’。
		
	1.4 ReadFile和WriteFile
		ReadFile 函数的签名如下:
		func ReadFile(filename string) ([]byte, error)
		
		函数文档：
		ReadFile 从 filename 指定的文件中读取数据并返回文件的内容。
		
		WriteFile 函数的签名如下：
		func WriteFile(filename string, data []byte, perm os.FileMode) error
		
		函数文档:
		WriteFile 将data写入filename文件中，当文件不存在时会根据perm指定
		的权限进行创建一个,文件存在时会先清空文件内容。对于 perm 参数，我
		们一般可以指定为：0666。
	
		1.5. TempDir 和 TempFile 函数
		通过 TempDir 创建一个临时目录，用于存放编译过程的临时文件：
		b.work, err = ioutil.TempDir("", "go-build")
		
		第一个参数为指定路径。如果为空，表明在系统默认的临时目录（ os.TempDir ）中
		创建临时目录（例如Linux下的/tmp目录），第二个参数指定临时目录名
		的前缀，该函数返回临时目录的路径。
		
		相应的，TempFile 用于创建临时文件。如 gofmt 命令的源码中创建临时
	文件：
		f1, err := ioutil.TempFile("", "gofmt")
		
		这里需要注意：创建者创建的临时文件和临时目录要负责删除这些临时目录和文件。
	如删除临时文件：
		defer func(){
			os.remove(f.Name())
		}
		
		举个例子：
			slice1 := make([]string, 10)
			defer func() {
				for _, name := range slice1 {
					os.Remove(name)
				}
			}()

			for i := 0; i < 10; i++ {
				name, err := ioutil.TempDir("./", "gotmp")
				if err != nil {
					Println(err.Error())
					return
				}
				Println("dir:", name)
				slice1 = append(slice1, name)
			}
		
	
	